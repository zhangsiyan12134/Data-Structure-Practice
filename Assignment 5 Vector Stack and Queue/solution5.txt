/*********************** Question 1 source file ********************/
// File: stacktemplate.cpp
// This program implements a stack template class
//Name: Siyan Zhang         B00815329

#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

template <class T>
class stack{
private:
    int max;           // maximum size of the stack
    int count;         // number of items on the stack
    vector<T> data;    // vector holding the stack items

public:
    stack(int sz);                   // constructor, max = sz

    void push(const T &item);        // push a copy of item onto the stack
    T &pop(void);                    // pop an item off the stack
    void write(ostream &out) const;  // send the data stored to out
    bool empty(void) const;          // check for empty stack
    bool full(void) const;           // check for full stack
};


int main(void)
{
    stack<string> mystack(5);
    ofstream fout ("stackout.txt");
    char ch;
    string x;

    while(1) {
        // print a little menu
        cout << "\n\np = push \n";
        cout << "o = pop\n";
        cout << "s = print to screen\n";
        cout << "f = print to file\n";
        cout << "q = quit\n\n";

        cin >> ch;

        if (ch == 'p') {
            cout <<"\ndata to push :";
            cin >> x;
            if(mystack.full()) {
                cout << "Stack is full" << endl;
            } else {
                mystack.push(x);
            }
        } else if(ch == 'o') {
            if(mystack.empty()) {
                cout << "Stack is empty" << endl;
            } else {
                x = mystack.pop();
                cout << "\n\ndata popped : " << x;
            }

        } else if(ch == 's') {
            mystack.write(cout);
        }else if(ch == 'f') {
            mystack.write(fout);
        }else if(ch == 'q') {
            break;
        }
    }

    fout.close();
    return 0;
}

template <class T>
stack<T>::stack(int sz):data(sz)
{
	max = sz;
	count = 0;
}
template <class T>
void stack<T>::push(const T &item)
{
	data[count] = item;
	count++;
}
template <class T>
T& stack<T>::pop(void)
{
	count--;
	return data[count];
}
template <class T>
void stack<T>::write(ostream &out) const
{
	for(int i = 0; i < count; i++)
	{
		out << data[i] << ' ';
	}
	out << endl;
}
template <class T>
bool stack<T>::empty(void) const
{
	if(count == 0)
	{
		return 1;
	} else
	{
		return 0;
	}
}
template <class T>
bool stack<T>::full(void) const
{
		if(count == max)
	{
		return 1;
	} else
	{
		return 0;
	}
}


/*********************** Question 1 output file ********************/
bob joe jean 
bob 

/*********************** Question 2 source file ********************/
// File: circularqueue.cpp
// This program implements a circular queue of integers
//Name: Siyan Zhang         B00815329

#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

class queue{
private:
    int max;           // maximum size of the queue
    int count;         // number of items in the queue
    int start;         // data[start] is the first entry in the queue
    int end;           // data[end-1] is the last entry in the queue
    vector<int> data;  // vector holding the queue of items

public:
    queue(int sz);                   // constructor, max = sz

    void put(int item);              // put the integer item onto the queue
    int get(void);                   // get an item at the head of the queue
    void write(ostream &out) const;  // send the data stored to out
    bool empty(void) const;          // check for empty queue
    bool full(void) const;           // check for full queue
};

int main(void)
{
    queue myqueue(5);
    ofstream fout ("queueout.txt");
    char ch;
    int x;

    while(1) {
        // print a little menu
        cout << "\n\np = put \n";
        cout << "g = get\n";
        cout << "s = print to screen\n";
        cout << "f = print to file\n";
        cout << "q = quit\n\n";

        cin >> ch;

        if (ch == 'p') {
            cout <<"\ndata to put :";
            cin >> x;
            if(myqueue.full()) {
                cout << "queue is full" << endl;
            } else {
                myqueue.put(x);
            }
        } else if(ch == 'g') {
            if(myqueue.empty()) {
                cout << "queue is empty" << endl;
            } else {
                x = myqueue.get();
                cout << "\n\ndata gotten : " << x;
            }

        } else if(ch == 's') {
            myqueue.write(cout);
        }else if(ch == 'f') {
            myqueue.write(fout);
        }else if(ch == 'q') {
            break;
        }
    }

   fout.close();
   return 0;
}

queue::queue(int sz) : data(sz)
{
    max = sz;
    count = 0;           // the queue has no entries yet
    start = 0;
    end = 0;
}

void queue::put(int item)
{
	data[end] = item;
	count++;
	end++;
	if(end == max)
    {
        end = 0;
    }
}
int queue::get(void)
{
	int tmp = 0;
	tmp = data[start];
	start++;
	if(start == max)
	{
		start = 0;
	}
	count--;
	return tmp;
}
void queue::write(ostream &out) const
{
	for(int i = 0; i < count; i++)
	{
		if(start+i >= max)
		{
			out << data[i-max+start] << ' ';
		} else
		{
			out << data[i+start] << ' ';
		}
	}
	out << endl;
}

bool queue::empty(void) const
{
    return (count == 0);
}

bool queue::full(void) const
{
    return (count == max);
}


/*********************** Question 2 output file ********************/

1 2 3 4 
4 
4 5 6 7 
6 7 

/*********************** Question 3 source file ********************/
// File: growingstack.cpp
// This program implements a simple stack of integers which grows as needed
//Name: Siyan Zhang         B00815329

#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

class stack{
private:
    int max;           // maximum size of the stack
    int count;         // number of items on the stack
    int grow;          // data will grow by this amount when needed
    vector<int> data;  // vector holding the stack items

public:
    stack(int sz, int growsz);       // constructor, max = sz, grow = growsz

    void push(int item);             // push the integer item onto the stack
    int pop(void);                   // pop an item off the stack
    void write(ostream &out) const;  // send the data stored to out
    bool empty(void) const;          // check for empty stack
};

int main(void)
{
    stack s(5, 4);
    ofstream fout ("growingstackout.txt");

    for (int i=1; i <= 15; i++) {
        s.push(i);
    }

    cout << "The stack is:\n";
    s.write(cout);

    fout << "The stack is:\n";
    s.write(fout);

    fout.close();
    return 0;
}

stack::stack(int sz, int growsz) : data(sz)
{
    max = sz;
    grow = growsz;
    count = 0;           // the stack has no entries yet
}

void stack::push(int item)
{
    if(max == count)
    {
        data.resize(max+grow);
        max+=grow;
    }
    data[count] = item;
    count++;
    cout << "New size: " << max <<endl;
}

int stack::pop(void)
{
    count--;
    return data[count];
}

void stack::write(ostream &out) const
{
    for(int i = 0; i < count; i++)
    {
        out << data[i] << " ";
    }
}

bool stack::empty(void) const
{
    return (count == 0);
}

/*********************** Question 3 output file ********************/
New size: 5
New size: 5
New size: 5
New size: 5
New size: 5
New size: 9
New size: 9
New size: 9
New size: 9
New size: 13
New size: 13
New size: 13
New size: 13
New size: 17
New size: 17
The stack is:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
Process returned 0 (0x0)   execution time : 0.028 s
Press any key to continue.
